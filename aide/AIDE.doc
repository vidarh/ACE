
                         +------------------+
                         |    AIDE v2.02    |
                         +------------------+

Introduction
------------

AIDE (ACE Integrated Development Environment) is a freely distributable
graphical front-end for the development of ACE programs.

It requires AmigaOS Release 2.04 or higher to run.

If you do have Release 2.04 or higher, you can start AIDE by double-clicking
its icon from the Workbench. With AIDE, you never need to start from a shell
again when developing ACE programs, although you may spawn a shell by
selecting an item from AIDE's Project menu (see below).

Note:

You don't have to worry about the stack size any more if you use AIDE.
AIDE will setup a stack size of 40000 bytes for any process run by AIDE.
AIDE only uses the default stack size of 4096 bytes!


Setting Up
----------

Before starting AIDE for the first time however, you must have ACE installed
correctly with the following corresponding directories:

    ACE:
    ACE:AIDE
    ACE:bin
    ACElib:       (ACE:lib)
    ACEinclude:   (ACE:include)
    ACEbmaps:     (ACE:bmaps)

    (see ACE.doc/ACE.guide for the details)

If these dirs aren't set up correctly, AIDE will abort with an error message.

Also you need:

    mrt.library     (just put it somewhere in your LIBS: path)
    thinpaz.font    (just put it in FONTS:)

These files will be in the archive.

Also distributed with AIDE will be the freeware version of PhxAss and
PhxLnk from Frank Wille as an alternative to A68K and BLink.

*** Note: To cut down on archive size, I've omitted PhxAss/Lnk from
	  the ACE v2.4 distribution. You can obtain these programs
	  from Aminet sites in dev/ass. [David Benn, September 1996]

To work fine and easy with AIDE the following dirs should also exist:


    ACE:Docs/       (where all the docs reside)

    ACE:Icons/      (where the necessary icons for ACE should be)

    ACE:Mods/       (where your compiled SubMods reside)

    ACE:Prgs/       (where your source code reside)

    ACE:Run/        (where your executables are going)

    ACE:Temp/       (where your temporary files during compilation
                     are going.)

    ACE:Utils/      (where all the ACE related utilities reside)

    ACE:Utils/ACEcalc/ACEcalc

    ACE:Utils/ReqEd/ReqEd

    ACE:Utils/FD2BMAP/FD2BMAP

    ACE:Utils/AB2ASCII/AB2ASCII

    ACE:Utils/UppercACEr/UppercACEr


If those dirs don't exist, AIDE's internal configuration part gives you
the possibility to do the setup to your personal need.

AIDE will create a new file called AIDE2.config to run properly. If you
have old config files from AIDE1.5 and before, your settings will be
copied to the new file. You can later delete the old files, if you wish.
You can't edit the new file any more, just use the integrated setup
part in AIDE (see below).

No AIDE2.config is included in the AIDE archive, if it doesn't exist,
AIDE will create one with the default settings.

If all the directories exist, as mentioned above, AIDE will create the
setup in this way, that you don't need to setup these settings manually.
Only for options, like PubScreen, Requester, .... you need to open
the setup window, anything else is already done.

Remember:

ACE:Temp is the default directory for temporary files during compilation.
This dir will be normally on HD so the times for writing and reading files
will be short. The change from T: to ACE:Temp has the reason to save memory
during compilation. If the default would be T: and T: resides in memory
(system default), then the source files are two times in memory.
Memory is always short, so it is better to have the temporary dir on HD
and not in RAM:. You may change it to your personal taste anyway, but
this is the default.

AIDE has no built-in editor, so you need to specify your favourite.
If no one is specified, the editor called "Ed" which resides in "C:"
will be used.

Note:
The editor you specify must be capable of taking command-line arguments
(e.g. a file name).

AIDE has no built-in viewer either. If ACE:Bin/MuchMore does exist, this
one will be used (default). If you have AmigaGuide/MultiView installed
(system default since Wb2.1), it will be used for all the corresponding
Amigaguide files in ACE:Docs.

If you want to view all files with Amigaguide/Multiview you have to
specify Amigaguide/Multiview for the viewer, too.

Note:

The text viewer you specify in AIDE.config must be capable of taking
command-line arguments (e.g. a file name).


Important Notes about the general behavior of AIDE:

    For "Run" and "Run in Shell" and all other applications the following
    CON: window definitions are used:


    "CON:xpos/ypos/1280/200/ AIDE Shell Window/AUTO/WAIT/CLOSE"


    AUTO  = the window will only be opened if there is any CLI output
            or input from the started process.

    WAIT  = the window will only be closed, when the user clicks the
            close button.

    CLOSE = a close button for the window is added.

    Therefore you have to close the output window manually when a program
    did finish the task. I did add this behavior so you can read the
    output from a program. If WAIT would not be set, the window would be
    closed before you could have read the output from your or any other
    program used by AIDE. You don't need to add the following lines
    to your code, if you only want to read the output from PRINT for
    testing purpose.

    WHILE INKEY$ <> "q" : WEND

    During the compilation run only the flag AUTO is used, so you don't
    need to close the CON: window.


    The system will automatically open the window with the right width.
    On systems with a higher resolution the CON: window will fit the
    width of the Workbench screen now.



    AIDE is using the DOS function SystemTagList() to start all external
    programs integrated in AIDE.

    Whenever it is possible and whenever it makes sense, the started process
    is running asynchronously.

    Some are still running synchronously, like the make process or the
    editor when editing the source file.


Using AIDE
----------

When you start AIDE the first time you will realise a big difference
to earlier versions. AIDE has a complete GUI now with many gadgets and
new functions added.

There are three pull-down menus in AIDE: Project, Utilities and Help.

The Project menu is for general house-keeping tasks;
The  Utilities menu provides access to a number of useful programs;
The Help menu gives you access to documentation for the compiler, assembler,
linker and the ACE language.

The entries in each menu will now be described briefly.


Project Menu
============

    Open...     -   Invokes the editor with a file name
                    which you must specify via a file
                    requester. If no file name is given,
                    AIDE will inform you with a message.
                    This option is included to edit any
                    file of your choice. For editing the
                    source file see below. The current used
                    dir will be remembered, so you don't have
                    to switch to all the directories again.

    View...     -   Lets you view a file which is selected
                    via a file requester. Remembers the
                    current dir.


    Rename...   -   Lets you rename a file specified via a
                    file requester. Remembers the
                    current dir.

                    First a file requester will be opened
                    where you have to select a file, which
                    you want to rename. Now a second file
                    requester appears where you have to select
                    the new name. You can change the directory
                    name, too, so a rename has the same
                    effect as "move a file". This is only possible
                    for the same device.


    Copy...     -   Lets you copy a file specified via a
                    file requester. Remembers the
                    current dir.

                    There will be also two file requester:
                    the first one to choose the source file,
                    the second one to choose the destination
                    dir and file name.
                    If you change the name for the destination
                    file, it will be copied with the new name.

    Delete...   -   Lets you delete a file specified via a
                    file requester. Remembers the
                    current dir.

                    Note:
                    No second requester will appear, asking,
                    if you really want to delete this file.
                    You can't double click the filename.
                    You have to choose "OK", to perform the
                    action.

    Print...    -   Lets you choose a file to print via a
                    file requester. Remembers the
                    current dir.

                    Note:
                    This function is very simple. It uses
                    your printer preferences, as setup via
                    the prefs tool from your workbench disk.
                    No page checking, no formatting, nothing
                    else is done.
                    The function prints files, no matter which
                    size, when they can be loaded in memory.

                    This maybe more comfortable in a future
                    release. ;-)

    Execute...  -   Allows an AmigaDOS command to be executed.
                    The command and its arguments are entered
                    into an input requester, a console
                    window is opened for any I/O associated
                    with the command and the latter is executed
                    if possible.

    Spawn Shell -   A NewShell process is started for more
                    comprehensive house-keeping than the
                    "Execute..." option is intended for.
                    Your default settings as defined in
                    S:Shell-Startup are used.

    AIDE setup  -   Opens a new window where you can setup all your
                    directories and some options for AIDE.
                    (See the explanation of the setup part
                     behind the menu description.)

    Load Config File
    Save Config File
                    You can create now multiple config files.
                    With these two functions you can load/save
                    now the default or any other config file.

                    default:

                    - will try to load/save a file named ACE:AIDE/AIDE2.config

                    other:

                    - will bring up a file requester where you can specify
                      any directory and filename of your choice.

    About       -   Brings up a message box telling you briefly
                    about AIDE.

    Quit AIDE   -   Exits from AIDE. (You can also click the close gadget of the
                    main window.)


Utilities
=========

Note:

   You need:

            ACE:Utils/ACEcalc/ACEcalc

            ACE:Utils/ReqEd/ReqEd

            ACE:Utils/FD2BMAP/FD2BMAP

            ACE:Utils/AB2ASCII/AB2ASCII

            ACE:Utils/UppercACEr/UppercACEr

    or an corresponding entry in AIDE2.config to use these functions.

    Calculator  -   Invokes the calculator

    ReqEd       -   Invokes ReqEd

    Create BMAP file(s)

                -   Converts the FD file(s) for a library
                    into a .bmap file used by ACE and
                    AmigaBASIC when calling shared
                    library functions. The .bmap file
                    is stored in the ACEbmaps: directory.
                    Invokes a file requester for selection.

                    You can select only one, all, or the specific
                    files you want to convert via the filerequester.

    Because no doc file exists for fd2bmap, which is used to perform
    the task, the header of the ACE source file is integrated here.


    >FD2BMAP Library DestDir
    >
    >by Harald Schneider
    >
    >Converts FD-File to a ACE-BMAP File like Commodores ConvertFD.
    >
    >Example: FD2BMAP l/dos RAM: reads l/dos_lib.fd and creates RAM:dos.bmap
    >
    >Differences to ConvertFD:
    >    - #private marked entries are skipped
    >    - Unlike AmigaBasic ACE allows the use of A5 for parameters so
    >      functions uses A5 are not ignored
    >
    >Name collision of ACE keywords and library calls are handled like
    >ConvertFD (Read --> _Read    -    note: prior to v1.2, it used to
    >be that 'x' rather than '_' was prefixed to the identifier).
    >
    >Modified by David Benn: 10th,17th January, 10th August 1994,
    >                        15th October 1994, 15th September 1995


    AmigaBASIC to ASCII

                -   Converts a compressed AmigaBASIC
                    file into an ASCII text file for
                    use by ACE.
                    Invokes a file requester for selection
                    of the input and output dir and file name.

    Because no doc file exists for AB2ASCII, a part ot the README file
    is integrated here:

    >AB2ASCII - Generate ASCII source from binary AmigaBasic files
    >
    >Usage:
    >ab2ascii <binary_file [>source_file]
    >
    >Note:
    >    The program rewind()s its stdin stream once. So a pipe is no
    >    acceptable input.
    >
    >Comments:
    >       I cannot guarrantee that the program understands all token
    >       constructs that AmigaBasic can produce AND translates them
    >       correctly. I obtained the `token dictionary' by trial and
    >       error (I did not disassemble AmigaBasic). For the programs
    >       I tested it on it seemed to work. The program could be less
    >       memory-consuming, (much) faster and in general be better coded.
    >       Users are invited to make any improvements they feel up to
    >       (the program belongs to you!).
    >
    >Author:
    >       Stefan Reisner
    >       sr@ph-cip.uni-koeln.de
    >
    >Copying:
    >       Public Domain


    Note:
        Be very careful if you use AB2ASCII. The program is not working
        very well!


        a)
          If the selected file is not an compressed AmigaBASIC file,
          AB2ASCII will hang and never return.


        b)
          If the selected file contains token constructs, AB2ASCII
          doesn't understand, AB2ASCII will create a file from
          a size, until your disk is full.
          Try ConvertFD, which is distributed by C= on the Extras1.3
          disk in the BasicDemos directory, to verify this behavior,
          if you want to fill your disk. :-)


        c)
          AB2ASCII produces no output, nor an error message.
          So take care when you want to use it. If you have
          AmigaBASIC, use it for converting the files.


    Any experienced C programmer is invited to improve this code.
    Send new codes to me for testing. (Author Address see below)


    UppercACEr  -   Invokes UppercACEr

                Please read the corresponding doc file for the details.

                Important:
                        The file UppercACEr.Reserved must reside
                        in S:!

                In any case you don't have to worry about the filenames.
                AIDE handles that for you. The converted file will have
                a _u extension to the filename like:

                UppercACEr test.b test_u.b


    Utility 0 to 3  Here you have the possibility to specify any
                    utility of your choice. A corresponding entry
                    in AIDE2.config must exist!

                    You can only use tools, which don't need an
                    argument to run.

                    This maybe changed in a future release.

Help
====

    This menu provides access to the documentation for the compiler,
    SuperOptimizer, assembler and linker from within AIDE.

    In addition, access to the ACE Language Reference manual, ACE
    examples, ACE history and this document can be gained via the
    Help menu.

    The Help function will do nothing if no viewer at all is specified.

    All the supported doc files must reside in your specified "Doc Dir".

    The supported docs are:

    AIDE.doc (/AIDE.guide will be available later)
    ACE.doc/ACE.guide
    SuperOptimizer.guide
    A68K.doc
    PhxAss.guide
    BLink.doc
    PhxLnk.guide
    ref.guide
    ace-rwords
    example.guide
    history
    ACEcalc.doc (/ACEcalc.guide if available)
    ReqEd.doc   (/ReqEd.guide if available)

    Note:
         The docs must exist under the names described above.
         AIDE relies on them. If you have other docs, you can
         view them with the function "View" from the "Project"
         menu in any case.

AIDE setup
==========

    This is completely new, so you don't have to edit a config file
    outside of AIDE. All the settings you change there will be active
    immediately despite of one.


    Just one word to the default font setting:

    Thinpaz.font is used so all the gadgets will fit in a window which
    can be displayed on a standard NTSC screen. For those who use a higher
    resolution of their Workbench screen, the option "Public Screen" can be
    used.


    Directory Setup:
    ----------------

    Well, when you choose AIDE setup the main window will be closed and the
    setup window will be opened. On the left side there are all the string
    gadgets for the directory setup. If you want to change the names manually
    you can do it there. If you type an error the old entry will be displayed
    again and the string gadget will be set to active state.
    When you select the "R" button ("R" means requester), right beside the
    string gadget, an ASL file requester will pop up where you can choose
    a directory or file name of your choice.

    Note:

    If only a directory is necessary for the setup a selected file name will
    be ignored.

    If no file name is selected where one is absolutely necessary, your
    choice will not be accepted.


    Other:
    ------

        Public Screen:
                        Here you have the choice to define, if AIDE should
                        run on an own public screen. This screen will have
                        "Shanghai" abilities. That means that all windows
                        which would normally be opened on the Workbench
                        screen, will now be opened on the AIDE screen.
                        The AIDE screen will close automatically if
                        the AIDE window and all the visitor windows are
                        closed.

                        This is the only setting which will have effect,
                        when you start AIDE again after saving your
                        config file as default (AIDE2.config).

                        This maybe changed in a future release.

        Requester:
                        Here you have the choice to define:

                        All:    all requester will be displayed
                        Error:  only error requester will be displayed
                        Min:    only fatal error requester will be displayed!

                        Just try it out and set this flag to your personal
                        taste.

        Clean up:       Here you have the choice to define:

                        Yes:    This is the default setting and that means
                                that all the temporary files will be deleted
                                when you quit AIDE.

                        No:     If you select this, then no temporary files
                                will be deleted when you quit AIDE. That
                                maybe useful if you want to have a look
                                at those files later. Older versions of
                                AIDE will always delete those files.
                                Still all temporary files will be deleted
                                when you perform a new compiler run.

                        Note:

                        ACE.err is now found in ACE:temp and no longer
                        in ACE:AIDE.


        Menu Pen:       Here you can select the color of the menu pen from
                        0 to 2. This maybe useful if you don't like
                        the default setting of menu pen 0 (background color).


Icon Tooltypes
==============

    You can configure AIDE now via the tooltypes entry of the source file
    icon and the AIDE program icon. The defined tooltypes are:

    FILETYPE    =   ACESource

                    If you are using icons for your source files that has
                    to be set, otherwise this file will be ignored!
                    This has the same effect as the .b/.bas extension when
                    you select a source file via file requester.

                    Note:
                    This entry is ignored if set in the AIDE program icon.


    CONFIGFILE  =   AIDE2.config or any other configfile name you have
                    specified for this source file.


    PRECO       =   app or any other precompiler you want to use with this
                    source file.

                    This is really useful because there are many source files
                    which still need APP instead of ACPP. So you don't have
                    to remember any more which source file needs which
                    precompiler.

                    Note:
                    An example source icon is included in this archive.

Main Window
===========

The main window holds now the functions and many more, which were found
before in the pull down menu.

All these functions are necessary to compile ACE program under different
conditions in a comfortable way.


Source
======

    Set         -   Lets you specify the ACE source file
                    to work with, via a file requester.
                    Some gadgets aren't accessible until this
                    has been done for the first time.

                    The file requester for "Set Source..."
                    starts up in the directory which was
                    referenced the last time this option was
                    invoked.

                    If the file selected does not exist,
                    AIDE will invoke the editor.

    Reset       -   Resets the current source file for a new
                    compiler run. Useful if you did invoke
                    the editor outside of AIDE.

    Edit        -   Invokes the editor with the current
                    source file as its argument.
                    If no editor is specified, this option
                    will be disabled

Program
=======

    Precompile  -   This will invoke the specified precompiler
                    with the current source file as its
                    argument. No check if the source file was
                    already precompiled is done.

    Compile     -   This will invoke ACE and the SuperOptimizer
                    if set to active.
                    No check if the source file was already compiled
                    is done.

    Assemble    -   This will invoke the selected assembler.
                    No check if the source file was already assembled
                    is done.

    Link        -   This will invoke the selected linker.
                    No check if the source file was already linked
                    is done.

    Run         -   Runs the current program, compiling it
                    first if necessary.

                    Important:

                    This functions can now be used for CLI programs,
                    too, but no input box will appear. If you need
                    to specify a command line argument use "Run in Shell"
                    instead. But if you don't need to enter command line
                    arguments, this function will do now the same task.

    Run in Shell-   Runs the current program in a shell,
                    compiling it first if necessary. Before
                    the program is run, AIDE asks for command
                    line arguments via an input requester.
                    Supply no arguments if none are required,
                    or use "Run" instead.

Make
====

    Executable  -   "Makes" the current program, putting
                    all intermediate files and the final
                    executable program into the temporary
                    working directory specified in AIDE2.config.

    Application -   Does the same as "Make Executable" but
                    also copies the final executable from
                    temporary storage to ACE:Run. This is the
                    default.

                    If the default is overwritten with
                    an empty entry, the executable goes to the
                    root directory where AIDE resides.
                    An icon is also copied. That is the default
                    for "Make Application".
                    You don't need to specify "Create Icon"
                    for the ACE options.

    Module      -   Creates an object module which can later
                    be linked with any ACE program. The only
                    difference between this option and Make
                    Executable (above) is that no linking occurs
                    and ACE's -m switch is used. See also "Creating
                    & using ACE subprogram modules" in ace.doc.
                    The object module goes to ACE:Mods (default),
                    or where the entry in AIDE2.config points to.
                    If this is empty, the module goes to the root
                    directory where AIDE resides.

                    The displayed module list will be updated if
                    the entry point in your configuration is
                    setup correctly.

Precompiler
==========

    The mutual exclusive buttons gives you the possibility to
    choose APP, ACPP or any other precompiler to be used to
    precompile your source file.

    If you select "other" an input box will pop up where you can
    enter the name of your desired precompiler.

    If you choose DCPP then the options will be set up correctly
    to be used for ACE programs. DCPP is much faster as ACPP and
    does the same task.

    If no precompiler name is entered, the button of your last
    selected one will be activated again and an existing precompiler
    name will be deleted.

    Clicking the close gadget of the window will ignore all what you
    may have entered in the string gadget. If your settings should
    take effect press <RETURN>.


ACE Options
===========

    Break Trapping
    Assem. Comments
    Create Icon
    Optimise
    Window Trapping

    These five correspond to the compiler's command-line switches:
    b,c,i,O and w respectively.
    See ace.doc's "Compiler options" section for details of each of these.

    List Source Lines is not available via checkbox gadget, if you need
    this, just enter "l" in the input box after selecting "other"!

    Since AIDE always uses ACE's -E switch to create an error file,
    this option is not available. Compilation errors are however,
    viewable via "View Compiler Errors"! (see below).

    other  -   If you select this button an input box will pop up
               and give you the possibility to enter any kind
               of ACE option which may be defined new for the future.
               Also use this if you want to specifiy "list source line"
               (see above).

               You have to enter the options as defined in ACE.doc.
               If no "space" is required, then don't enter it.

               If you enter an empty string here all options which
               may be defined before will be deleted.

               Clicking the close gadget of the window will ignore all
               what you may have entered in the string gadget. If your
               settings should take effect press <RETURN>.

SuperOptimizer
==============

    Here you can choose, if you want to use the SuperOptimzer from Manuel
    Andre. With "Set Level" you can set the the superopt level. A input
    box will pop up, where you can enter the number. Only numbers from
    1 to 12 are accepted. The default value is set to 12.

    Note:
        The SuperOptimizer is used in combination with the make process
        of ACE. If you did change the level you have to recompile
        the source again with ACE using the "Compile" button.

        If you did switch off the Superoptimizer, you don't have to
        recompile again, because the unoptimized file <name>.s still
        exists and AIDE will use this one instead of <name>_opt.s.

        In a future release it might be possible to select the
        Superoptimizer separately.

View
====

    Precompiled Source
                -   Allows you to view the preprocessed source file.

    Assembly Source
                -   Allows you to view the target assembly
                    source file which results from compiling
                    a program.

    Compiler Errors
                -   Lets you see the errors (if any) generated
                    by the last compilation with ACE.
Note:

    These options are only available if a viewer is specified.
    See the part above about the viewer for more details.


Assembler
=========

    Here you can choose which assembler you like to use.
    A68K and PhxAss (see the corresponding doc files for more details)
    are fully supported from AIDE.

    Just select the desired options or enter new ones with the "Set Options"
    buttons. All what you enter has to be done the same way as if you would
    type them at the Shell prompt. For A68K and PhxAss the options are set
    in the right place of the command string. PhxAss ist set to NULL for
    optimizing the assembly output. It depends on your program which
    optimizing options you can use. Read the docs carefully and try them.
    Optimizing the assembly output results in shorter/faster executables.

    When you specify another assembler via the "other" button then the
    options will be added after the name of the file which has to be
    assembled.

    Example:

    superassembler test.s .................. this is the default used name
                                             build out of the assembler name
                                             and the compiled source name.

    Then all what you did enter via the "Set Option" button will be added!
    You have to specify an object file name "test.o" if the assembler needs
    it to create a linkable module.

    But be aware:

    If you did define options for A68K and you switch to PhxAss then
    you have to delete those options first, otherwise they will be used
    also for PhxAss. This will result in an error message from PhxAss.


    Small Code/Small Data model:

    Please read the corresponding docs for the assemblers to this point
    very very carefully. Not all assemblers does the same task!!!
    Don't choose these options if you are not sure what they are doing.


    Debug Info:

    If you select this, A68K or PhxAss will create a symbol table for all
    the labels and variable names which exists in the .s file. This is
    especially helpful if also "Assembly Comment" is selected as ACE option.
    The compiled program can then be watched with a symbol debugger like
    MonAm. And you can compare it with your assembly source file.


Linker Lib
==========

    Here you can choose which linker lib despite of the defaults db.lib
    and startup.lib, which are linked always, should be used.
    For PhxLnk you can use the standard Amiga.lib instead of Ami.lib.

    Important:

    Blink will crash if you try to link Amiga.lib!!!!!!


Linker
======

    Here you choose which linker you like to use.
    BLink and PhxLnk are fully supported by AIDE.

    What I did say about the handling of the "Set Options" button above
    in the assembler chapter is also valid for the linker part.
    So read the linker docs carefully if you want to use other options as
    predefined in AIDE.


    SmallCode:
    ----------

    If you choose this option the supported linkers will link all your
    program code into one piece. This results in shorter executable, but
    can't be "scattered loaded". See in any case the corresponding linker
    docs files for the details.


    Small Data:
    -----------

    This has the same effect for the data section of your program as
    described above for the program section.


    Important:

    PhxLnk links all data sections into one piece, no matter if for
    some special ones the Chip mem bit is set! This can result in the
    effect that some machines are reporting "not enough memory"
    if they try to load a program wich was linked with PhxLnk and this
    option set. That happens, because ACE creates large data sections
    (depending on the used amount of variables) which has to be loaded
    to Chip mem now. Machines with only 512k and sometimes those with
    1Mega byte of chip mem, will report "not enough memory".

    PhxLnk has options to force Chip mem data sections to Chip mem and
    all the other data sections to Fast mem, but that has to be done
    inside of the assembler source file. :-( This is not possible
    for normal :-) ACE programmers. We only can hope that Klaus will
    be so kind to add an option to PhxLnk, so this will be done
    automatically.

    Blink separates Chip mem data sections from the others, so this
    will not happen with BLink.

    In any case you should be aware, that this option only makes
    sense, if also the assembler option was set to SmallCode/Small Data.
    If it wasn't, and ACE doesn't allow SmallCode/Small Data for all your
    programs, SmallCode/Small Data option set for the linker only,
    results in programs which can have loading problems on machines
    with less memory and high memory fragmentation.


    No Debug Info:
    --------------

    If you select this option the program will be linked ignoring
    all defined symbol table entries, if they exist.


Module
======

    All SUBMods which resides in the specified "Module Dir" are
    displayed in the main window. Just click on the name to select
    the one you want to link and the choosen one will be highlighted.
    Clicking on a selected entry results in unselecting it.
    If you want to remove all modules just click on the button
    "Remove all Modules"

    There is no limit for the amount of Modules defined which can
    be linked.

    The amount is only limited by the length of the command line the
    linker accepts for input. My testing did result in about 20
    modules as maximum (depending on the length of the file name).
    The buffer of AIDE allows up to 120 modules until an error
    message is displayed.

    If the list is longer then you can scroll the list using the slider
    at the right side.

    Note:

        No checking of the filename is done, only directory names are
        ignored. Therefore you can place any type of linkable file into
        your "Module Dir".
        If you want to link other linker libs as predefined just place
        them here and select them as described above.


    Note:

        If you want to save your option settings from the main window,
        use "Save Configuration" from the "Project" menu.
        All your settings will be saved in AIDE2.config (default) or
        in another file "save as..." if you wish to do so.



AIDE's "Make" Process
---------------------

As you may have gleaned from the above, AIDE has a simple inbuilt "make"
capability.

This means that before it builds or makes an exectuable and prior to
compiling or running a program, AIDE checks to see whether compilation
needs to take place at all.

If you have created an executable and then decide to run it, AIDE
will not recompile the source first. Likewise, if you want to build
an executable and the program has already been compiled, the executable
will be copied from AIDE's temporary workspace only.

In like manner, if you have compiled a program to produce an assembly source
file, so long as you don't edit the ACE source file, AIDE will not recompile
the program before assembling and linking it.

If you want to recompile select "Source Reset" or do it step by step with
the buttons in the "Program" section.

On the other hand if you edit a source file, next time you go to run it,
AIDE will "bring the program up to date" by compiling, assembling and linking
it first.

If you forgot to link some modules just select them and select "Link"
from the "Program" section.

In order to preprocess, compile, assemble and link a program, AIDE now
uses the DOS function SystemTagList(). An intuition window will be
opened to watch the progress of your compilation run. If you select "Stop"
there, the next step will not be taken. If you want to stop immediately
you have to press Ctrl-C in the CON: window, which was also opened
to display the current output from ACE and the other programs.
But not all programs, used to make an executable, accept Ctrl-C, therefore
the "Stop" button was added.

Note:

    Only the next step can be aborted via the "Stop" button, because
    SystemTagList() didn't return before and did give the control back
    to AIDE.

    PIPE: is not used anymore!

If an error or user break occurs during preprocessing or compilation,
AIDE will stop and give the control back to the user.


Important:
          The buttons in the "Program" section will not change their state
          if you change any names/options for precompiler, ACE, assembler,
          linker lib or linker and the internal state of the make process
          will not be affected either.

          If you did change the options just select the corresponding
          buttons in the "Program" section to perform the missing
          steps of your compilation process.
          This habit differs completely from older versions of AIDE.
          It was done this way, so that the program is not recompiled
          completly, because only the assembler or linker option had
          been changed.

          If you want to perform a new compiler run, just select "Reset"
          from the source section and "Make Executable" or whatever
          AIDE should do for you.

Credits:

        I forgot to mention this before. Sorry, friends. :-(

        Especially I have to thank the following persons for their help,
        and for their patience to test all my bad and buggy :-) beta
        versions.

        David Benn
        Frank Wille
        Klaus Gessner


        AIDE was testet with Enforcer, Mungwall and Codewatcher and
        the release v2.02 should be free of all buggy parts and
        Enforcer hits.

Final Comments
--------------

The new included Phoenix package consisting of the freeware version
of PhxAss and PhxLnk is copyrighted to Frank Wille. See the corresponding
doc files for the details.

Thank you, Frank, for allowing me to include your wonderful assembler
and linker into the new release of AIDE.

AIDE is completely rewritten in assembler and assembled with PhxAss.

This is the second complete release of a new generation of AIDE.
Nothing is perfect and AIDE still is not.

All your comments and hints are welcome and wanted.
Feel free to make any suggestions about AIDE and please report any bugs
to me.

In any case, I hope you find AIDE to be a pleasant environment in which
to develop ACE programs.



Contact:

Herbert Breuer
A.A. 5469
Bogota/Columbia
South America

Tel.: (Columbia)91/8261959

        g-suarez@uniandes.edu.co (Herbert Breuer)



Regards,

Herbert Breuer

Bogota, Columbia

13th May 1996

PS.

Thank you, David, for the wonderful ACE-BASIC-compiler, and for giving me
the responsibility for AIDE.

